Project Name  Concordia Scheduler                                                                                          Version 2.0
Software Requirements Specification                         Last Modified:  November, 13th, 2016
  Software Requirements Specification




Version 2.0


for


<Project name>


Prepared by




Name
	StudentID
	Email
	Lance Lafontaine
	26349188
	lance.lafontaine92@gmail.com
	Jason Tsalikis
	25892120
	jtsalikis@hotmail.ca
	Lenz Petion
	26775837
	lenzpetion@gmail.com
	Rameen Rastan-Vadiveloo
	27191863
	rameenrastanv@hotmail.com
	Benny Zhao	
	272051404
	bennyzhao@live.ca


Instructor
	Professor Constantinos Constantinides
	Course
	SOEN 343
Software Architecture and Design I
	Date:
	??
	











________________


Document History


Date
	Version
	Description
	Authors
	Saturday October 8th 2016
	0.1
	

	All
	Saturday October 23rd
	0.2
	

	Simeon Cvetkovic,
Lance Lafontaine
	

	

	

	

	

	

	

	

	











________________


Table of contents
        
1.        Introduction        5
        Purpose        5
        Scope        5
        Definitions, acronyms,         and abbreviations        5
        References        5
2.        Overall         description        6
        Product perspective        6
        Product functions        6
        User characteristics        6
        Constraints        6
        Assumptions and         dependencies        6
3.        Specific         requirements        7
        External interfaces        7
        Functionality        7
        Actor goal list        7
        Use case view        8
        Reliability        8
        Usability        8
        Efficiency        8
        Maintainability        9
        Portability        9
        Design constraints        9
        (On-line) user         documentation and help        9
        Purchased components        9
        Licensing requirements        9
        Legal, copyright and         other notices        9
3.        Analysis         Models        10
        


        






________________


List of figures
        
Figure         1. Use case model.        7
        


        












________________




INTRODUCTION
Introduction

	The essence of the project is a web application that displays the availabilities of rooms that students can use for academic activities, and allows users to reserve those rooms for a specific time slot. In this document, the goal is to understand and document the requirements of the system and ensure that they are feasible and consistent with each other. The purpose and scope are clearly defined; the description of constraints and assumptions of the project are noted. In the specific requirements section, both the functional and nonfunctional requirements are documented. A use case model and domain model are provided, from which use cases are derived. Critical use cases are identified, their respective system sequence diagrams are shown, with the system operations, the operation contracts followed the interaction diagrams. 

Purpose

	The srs is a contract between developers and stackholders; given such it is meant to be read by both stackholders and developers and validate all requiments. The structure is such that we decribe what is feasable and the constraints we have on the system. Following that the requiments for the system are detailed, both functinal and nonfunctional. Thano use case models, use cases and the domain model. The use cases tell us a story of how our system behaves. Stackholder can verify these "stories" upon reading if it matches their requriments. 




Scope

	The project allows a user to log into the webpage. A schedule appears wiht a list of rooms; the user can view the scheduele for different rooms and see avaliable timeslots. The user can thus book a timeslot for a room or if deserired timeslot is taken can go on the waitlist. The goals essentialy is to allow users find a room that is free and book a timeslot, and should it all be taken go on the waitlist. This will allow students to organize meetings with far more ease. 




Definitions, acronyms, and abbreviations
Srs : Software Requirments Specification



Term
Definition
User
Someone who interacts with the reservation system.
Registry
A system for keeping a official record of room reservation
Room
A space that students occupy for academic activities
Wait list
A list of people waiting for something, especially housing or admission to a school.
Reservation
The action  of reserving something
Time Slot
A conventionally defined time interval in a schedule.
Calendar
A chart or series of pages showing the days, weeks, and months of a particular year, or giving particular seasonal information
Stakeholder
An individual, group, or organization, who may affect, be affected by, or perceive itself to be affected by a decision, activity, or outcome of a project.
SRS
Software requirements specification
SAD
Software Architecture Documentation
Python
Python is a high-level, general-purpose programming language




References
Provide a list of all documents referenced in the SRS.

https://en.oxforddictionaries.com/definition/reservation
https://en.wikipedia.org/wiki/Project_stakeholder
https://www.google.com 








OVERALL DESCRIPTION
This section describes a background to the requirements: The general factors that affect the product, such as constraints, assumptions and dependencies.










Product perspective
	The product is available to all concordia engineering students. It is a web based application that uses layered architecture + client server architecture. It works among all the major browsers. User account, the system allows the user to login to their accounts in the system and provide features of updating and viewing their reservations. The system can support a small to medium number of users as it is hosted off a computer. 


Product functions
	The major system functions provided by the product to a user include making a new reservation for an available room at a desired timeslot, entering the waiting list for a booked room at a desired timeslot, deleting an existing room reservation, modifying an existing reservation, and viewing their current reservations. 
* User characteristics
	The intended users of this product are students studying in the Engineering department of Concordia University. The user is not expected to have a particularly high level of experience or technical expertise in software systems, they are merely are expected to be at a University educational level. 


Constraints
	The system must promote fairness by limiting the number of reservations a given user can occupy at a time. The system must also incorporate a level of safety and security, by ensuring a user’s credentials and information cannot be accessed by other users of the system, and also that a user’s information, such as their current reservations or waiting list status, cannot be overwritten by another user. If two or more users make a reservation for an available room simultaneously, the system must award the reservation to one user, and provide an error message to the other user(s). 


Assumptions and dependencies
	As a web application, the system’s main dependency will be a web browser. It is assumed that the system will be compatible with all major operating systems (Windows, Linux and macOS). It is expected to be compatible with all modern browsers that respect HTML5 web standards. It assumes that rooms will be available for reservation on any day of the week, including weekends, with the exception of holidays recognized by the University.



SPECIFIC REQUIREMENTS 
This section contains all requirements in detail: Functional as well as non-functional requirements (quality attributes and constraints). The quality attributes are listed according to the ISO/IEC 25010 standard that classifies software quality in a structured set of characteristics and sub-characteristics.


External interfaces
1-	Input: Username and Password (login)
	Output: Error message if the user isn’t found in the database


2-	Input: Room information (day, timeslot, room number)
	Output: Display room status (Free or full)


3-	Input: View rooms calendar
	Output: Calendar showing the information of each room


4-	Input: Modified room reservation ( delete reservation, new day, new timesolt)
	Output: Display room status (Free or full)


Functionality


Functional requirements capture the intended behaviour of the system. This section contains the Actor Goal List and the Use Case view.


Actor goal list
                        
Actor
                
	                        
Goal
                
	                        


                        
                
	                        


                        
                
	



Use case view
The use case model is shown in Figure 1.


Figure 1. Use case model.


Reliability
Description goes here.


Usability
The website’s friendly UI makes it easy for the user to use the different functionalities
The website can be used by Concordia students


Efficiency
Description goes here.-------
Maintainability
Description goes here.------


Portability
Desktop friendly user interface


Design constraints
-Used languages: HTML, CSS JavaScript, Python, SQL
-Framework: Django


(On-line) user documentation and help
Description.


Purchased components
No purchased components for this project.


Licensing requirements
No licensing requirements for this project.


Legal, copyright and other notices
Intellectual property






ANALYSIS MODELS

Domain Model 

(Insert Domain Model)

Use Cases




Use case UC1: Make Reservation
Primary Actor: User
Stakeholders and Interests:
Preconditions:
User is authenticated in system
Room and desired timeslot is available
Success Guarantee (Postconditions):
User has booked a room
Main Success Scenario (or basic flow):
User specifies a room
User views calendar for room
User chooses an available timeslot in room
User books reservation
User receives confirmation of successful reservation
Extensions (or alternative flows):
If time slot is booked by another user during the transaction, show error and prompt to add to waitlist.










Use case UC2: View Reservation
Primary Actor: User
Stakeholders and Interests:
Preconditions:
User is authenticated in system
Success Guarantee (Postconditions):
User can view his reservation
Main Success Scenario (or basic flow):
User chooses the option to view reservations
System prompts for a room
User selects room
 System displays all reservations for the selected room








Use case UC3: Modify Reservation
Primary Actor: User
Stakeholders and Interests:
Preconditions: 
User is authenticated in system
The user is viewing an existing reservation of his
Success Guarantee (Postconditions):
User has changed his reservation and can view it
Main Success Scenario (or basic flow):
User chooses the option to view his reservations
System displays his reservations
User edits timeslot
 System displays message confirming modification of reservation
Extensions (or alternative flows):
User chooses the option to view his reservations
System displays his reservations
User edits timeslot
 System displays message saying time slot is booked, prompts to ask if user wants to go on waitlist














Use case UC4: Cancel Reservation
Primary Actor: User
Stakeholders and Interests:
Preconditions:
User is authenticated in system
The user is viewing an existing reservation of his
Success Guarantee (Postconditions):
User has cancelled his reservation 
Main Success Scenario (or basic flow):
User selects cancel reservation
System displays message of confirmation








Use case UC4: Log in
Primary Actor: User
Stakeholders and Interests:
Preconditions:
User is registered
Success Guarantee (Postconditions):
User is identified and authenticated
Main Success Scenario (or basic flow):
User enters credentials
System confirms authentication




Use case UC5: Log out
Primary Actor: User
Stakeholders and Interests:
Preconditions:
User is authenticated in system
Success Guarantee (Postconditions):
User is logged out 
Main Success Scenario (or basic flow):
User prompts log out
System confirms log out

System Sequence Diagrams
(Insert SSDs)

System Operations


makeReservation(userId, roomNumber, timeslot)
viewReservations(roomNumber)
cancelReservation(userId, roomNumber, timeslot)
modifyReservation(userId, roomNumber, timeslot, newTimeslot)




Operation Contracts




Contract C01: Make Reservation
Operation: makeReservation(userId, roomNumber, timeslot)
Cross Reference : UC1 Make Reservation
Preconditions:
None
Postconditions:
A Reservation instance reserv was created. (instance created)
reserv.timeInterval was modified (attribute modification)
reserv was associated with Room. (association formed)
reserv was associated with User. (association formed)










Contract C02: View Reservation
Operation: viewReservation(userId, roomNumber, timeslot)
Cross Reference : UC2 View Reservation
Preconditions:
None
Postconditions:
None




Contract C03: Modify Reservation
Operation: modifyReservation(userId, roomNumber, timeslot, newTimeslot)
Cross Reference : UC3 Modify Reservation
Preconditions:
A Reservation is associated with User.
Postconditions:
Reservation.timeInterval was set to newTimeslot (attribute modification)




Contract C04: Cancel Reservation
Operation: cancelReservation(userId, roomNumber, timeslo
Cross Reference : UC4 Cancel Reservation
Preconditions:
A Reservation is associated with User.
Postconditions:
A Reservation instance was deleted. (instance deletion)
















DISCUSS THE THE SOFTWARE PROCESS THAT WE ARE USING?




ASSUMPTION:
* Can’t have more than X hours successfully registered for in a week. 
* Can’t have successfuly reservations of more than X hours across all rooms room per week per user.
* A user can register for the same timeslot in different rooms.
* Once you have successfully booked a timeslot in a room:
   * All reservations in the waitlist in that timeslot are automatically removed.
   * All new attempts at reserving (whether waitlist or not) are forbidden.


MaxReservationPerWeek should be an attribute for User


The reservation table should

